const { Pool } = require('pg');

/**
 * Di chuy·ªÉn d·ªØ li·ªáu t·ª´ database ngu·ªìn sang database ƒë√≠ch
 * @param {string} sourceConnectionString - Connection string c·ªßa DB ngu·ªìn
 * @param {string} targetConnectionString - Connection string c·ªßa DB ƒë√≠ch
 * @param {string[]} excludeTables - M·∫£ng t√™n c√°c b·∫£ng kh√¥ng di chuy·ªÉn
 * @param {string} schema - Schema name (m·∫∑c ƒë·ªãnh 'public')
 */
async function migratePostgreSQLData(
  sourceConnectionString,
  targetConnectionString,
  excludeTables = [],
  schema = 'public'
) {
  // Validate connection strings
  if (!sourceConnectionString || !targetConnectionString) {
    throw new Error('Connection strings kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  }

  console.log('üîç Ki·ªÉm tra connection strings...');
  console.log('Source:', sourceConnectionString.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));
  console.log('Target:', targetConnectionString.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));

  const sourcePool = new Pool({ 
    connectionString: sourceConnectionString,
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000
  });
  const targetPool = new Pool({ 
    connectionString: targetConnectionString,
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000
  });

  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh di chuy·ªÉn d·ªØ li·ªáu...');

    // Test connections
    console.log('üîó Ki·ªÉm tra k·∫øt n·ªëi database...');
    try {
      const sourceTest = await sourcePool.query('SELECT 1');
      console.log('‚úÖ K·∫øt n·ªëi source database th√†nh c√¥ng');
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi source database: ${error.message}`);
    }

    try {
      const targetTest = await targetPool.query('SELECT 1');
      console.log('‚úÖ K·∫øt n·ªëi target database th√†nh c√¥ng');
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi target database: ${error.message}`);
    }

    // 1. T·∫Øt foreign key constraints ·ªü DB ƒë√≠ch
    console.log('üîí T·∫Øt foreign key constraints...');
    await disableForeignKeyConstraints(targetPool, schema);

    // 2. L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng t·ª´ DB ngu·ªìn
    console.log('üìã L·∫•y danh s√°ch b·∫£ng...');
    const tables = await getTables(sourcePool, schema, excludeTables);
    console.log(`T√¨m th·∫•y ${tables.length} b·∫£ng c·∫ßn di chuy·ªÉn:`, tables);

    // 3. Di chuy·ªÉn d·ªØ li·ªáu t·ª´ng b·∫£ng
    for (const table of tables) {
      console.log(`üì¶ ƒêang di chuy·ªÉn b·∫£ng: ${table}...`);
      await migrateTable(sourcePool, targetPool, table, schema);
      console.log(`‚úÖ Ho√†n th√†nh b·∫£ng: ${table}`);
    }

    // 4. B·∫≠t l·∫°i foreign key constraints
    console.log('üîì B·∫≠t l·∫°i foreign key constraints...');
    await enableForeignKeyConstraints(targetPool, schema);

    console.log('üéâ Di chuy·ªÉn d·ªØ li·ªáu ho√†n t·∫•t!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh di chuy·ªÉn:', error.message);
    
    // Ch·ªâ c·ªë g·∫Øng b·∫≠t l·∫°i foreign key constraints n·∫øu target pool ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng
    if (targetPool && !error.message.includes('target database')) {
      try {
        console.log('üîÑ ƒêang c·ªë g·∫Øng b·∫≠t l·∫°i foreign key constraints...');
        await enableForeignKeyConstraints(targetPool, schema);
        console.log('‚úÖ ƒê√£ b·∫≠t l·∫°i foreign key constraints');
      } catch (constraintError) {
        console.error('‚ùå Kh√¥ng th·ªÉ b·∫≠t l·∫°i foreign key constraints:', constraintError.message);
      }
    }
    
    throw error;
  } finally {
    // ƒê√≥ng connections an to√†n
    try {
      await sourcePool.end();
      console.log('üîå ƒê√£ ƒë√≥ng source connection');
    } catch (e) {
      console.warn('‚ö†Ô∏è L·ªói khi ƒë√≥ng source connection:', e.message);
    }
    
    try {
      await targetPool.end();
      console.log('üîå ƒê√£ ƒë√≥ng target connection');
    } catch (e) {
      console.warn('‚ö†Ô∏è L·ªói khi ƒë√≥ng target connection:', e.message);
    }
  }
}

/**
 * T·∫Øt t·∫•t c·∫£ foreign key constraints
 */
async function disableForeignKeyConstraints(pool, schema) {
  const query = `
    SELECT 'ALTER TABLE ' || quote_ident(schemaname) || '.' || quote_ident(tablename) || 
           ' DISABLE TRIGGER ALL;' as sql
    FROM pg_tables 
    WHERE schemaname = $1;
  `;
  
  const result = await pool.query(query, [schema]);
  
  for (const row of result.rows) {
    await pool.query(row.sql);
  }
}

/**
 * B·∫≠t l·∫°i t·∫•t c·∫£ foreign key constraints
 */
async function enableForeignKeyConstraints(pool, schema) {
  const query = `
    SELECT 'ALTER TABLE ' || quote_ident(schemaname) || '.' || quote_ident(tablename) || 
           ' ENABLE TRIGGER ALL;' as sql
    FROM pg_tables 
    WHERE schemaname = $1;
  `;
  
  const result = await pool.query(query, [schema]);
  
  for (const row of result.rows) {
    await pool.query(row.sql);
  }
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng (tr·ª´ nh·ªØng b·∫£ng trong excludeTables)
 */
async function getTables(pool, schema, excludeTables) {
  const query = `
    SELECT tablename 
    FROM pg_tables 
    WHERE schemaname = $1 
    AND tablename NOT IN (${excludeTables.map((_, i) => `$${i + 2}`).join(', ')})
    ORDER BY tablename;
  `;
  
  const params = [schema, ...excludeTables];
  const result = await pool.query(query, params);
  
  return result.rows.map(row => row.tablename);
}

/**
 * Di chuy·ªÉn d·ªØ li·ªáu c·ªßa m·ªôt b·∫£ng
 */
async function migrateTable(sourcePool, targetPool, tableName, schema) {
  const fullTableName = `${schema}.${tableName}`;
  
  try {
    // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng ƒë√≠ch (n·∫øu c√≥)
    await targetPool.query(`TRUNCATE TABLE ${fullTableName} CASCADE;`);
    
    // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ b·∫£ng ngu·ªìn
    const sourceData = await sourcePool.query(`SELECT * FROM ${fullTableName};`);
    
    if (sourceData.rows.length === 0) {
      console.log(`  ‚ö†Ô∏è  B·∫£ng ${tableName} kh√¥ng c√≥ d·ªØ li·ªáu`);
      return;
    }

    // L·∫•y th√¥ng tin c·ªôt ƒë·ªÉ t·∫°o c√¢u INSERT
    const columns = Object.keys(sourceData.rows[0]);
    const columnsList = columns.map(col => `"${col}"`).join(', ');
    const placeholders = columns.map((_, i) => `$${i + 1}`).join(', ');
    
    const insertQuery = `
      INSERT INTO ${fullTableName} (${columnsList}) 
      VALUES (${placeholders});
    `;

    // Insert t·ª´ng d√≤ng d·ªØ li·ªáu
    let insertedCount = 0;
    for (const row of sourceData.rows) {
      const values = columns.map(col => row[col]);
      await targetPool.query(insertQuery, values);
      insertedCount++;
      
      // Hi·ªÉn th·ªã ti·∫øn tr√¨nh m·ªói 1000 d√≤ng
      if (insertedCount % 1000 === 0) {
        console.log(`  üìä ƒê√£ ch√®n ${insertedCount}/${sourceData.rows.length} d√≤ng...`);
      }
    }
    
    console.log(`  ‚ú® ƒê√£ ch√®n ${insertedCount} d√≤ng v√†o b·∫£ng ${tableName}`);
    
    // Reset sequence n·∫øu c√≥
    await resetSequences(targetPool, tableName, schema);
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi di chuy·ªÉn b·∫£ng ${tableName}:`, error);
    throw error;
  }
}

/**
 * Reset auto-increment sequences
 */
async function resetSequences(pool, tableName, schema) {
  const query = `
    SELECT column_name, column_default
    FROM information_schema.columns
    WHERE table_schema = $1 AND table_name = $2
    AND column_default LIKE 'nextval%';
  `;
  
  const result = await pool.query(query, [schema, tableName]);
  
  for (const row of result.rows) {
    const sequenceName = row.column_default.match(/nextval\('([^']+)'/)?.[1];
    if (sequenceName) {
      const resetQuery = `
        SELECT setval('${sequenceName}', 
          COALESCE((SELECT MAX(${row.column_name}) FROM ${schema}.${tableName}), 1)
        );
      `;
      await pool.query(resetQuery);
    }
  }
}

// H√†m helper ƒë·ªÉ validate v√† parse connection string
function validateConnectionString(connectionString, name) {
  try {
    const url = new URL(connectionString);
    if (url.protocol !== 'postgresql:' && url.protocol !== 'postgres:') {
      throw new Error(`${name}: Protocol ph·∫£i l√† postgresql:// ho·∫∑c postgres://`);
    }
    if (!url.hostname) {
      throw new Error(`${name}: Thi·∫øu hostname trong connection string`);
    }
    if (!url.pathname || url.pathname === '/') {
      throw new Error(`${name}: Thi·∫øu database name trong connection string`);
    }
    console.log(`‚úÖ ${name} connection string h·ª£p l·ªá`);
    console.log(`   Host: ${url.hostname}:${url.port || 5432}`);
    console.log(`   Database: ${url.pathname.substring(1)}`);
    console.log(`   User: ${url.username}`);
  } catch (error) {
    throw new Error(`${name} connection string kh√¥ng h·ª£p l·ªá: ${error.message}`);
  }
}

// H√†m helper ƒë·ªÉ ch·∫°y migration v·ªõi error handling t·ªët h∆°n
async function runMigration(config) {
  const {
    sourceConnectionString,
    targetConnectionString,
    excludeTables = [],
    schema = 'public'
  } = config;

  try {
    // Validate connection strings tr∆∞·ªõc
    validateConnectionString(sourceConnectionString, 'Source');
    validateConnectionString(targetConnectionString, 'Target');
    
    await migratePostgreSQLData(
      sourceConnectionString,
      targetConnectionString,
      excludeTables,
      schema
    );
  } catch (error) {
    console.error('üí• Migration th·∫•t b·∫°i:', error.message);
    
    // G·ª£i √Ω s·ª≠a l·ªói ph·ªï bi·∫øn
    if (error.message.includes('ENOTFOUND')) {
      console.log('\nüîß G·ª£i √Ω s·ª≠a l·ªói:');
      console.log('1. Ki·ªÉm tra hostname/IP address c√≥ ƒë√∫ng kh√¥ng');
      console.log('2. Ki·ªÉm tra database server c√≥ ƒëang ch·∫°y kh√¥ng');
      console.log('3. Ki·ªÉm tra network connectivity');
      console.log('4. Th·ª≠ d√πng IP thay v√¨ hostname');
    } else if (error.message.includes('authentication')) {
      console.log('\nüîß G·ª£i √Ω s·ª≠a l·ªói:');
      console.log('1. Ki·ªÉm tra username/password');
      console.log('2. Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p database kh√¥ng');
    } else if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.log('\nüîß G·ª£i √Ω s·ª≠a l·ªói:');
      console.log('1. Ki·ªÉm tra t√™n database c√≥ ƒë√∫ng kh√¥ng');
      console.log('2. T·∫°o database n·∫øu ch∆∞a c√≥');
    }
    
    process.exit(1);
  }
}

// Export functions
module.exports = {
  migratePostgreSQLData,
  runMigration,
  validateConnectionString
};

// // V√≠ d·ª• s·ª≠ d·ª•ng
// if (require.main === module) {
//   // ‚ùå Connection string l·ªói (hostname 'base' kh√¥ng t·ªìn t·∫°i)
//   // const config = {
//   //   sourceConnectionString: 'postgresql://user:password@base:5432/source_db',
//   //   targetConnectionString: 'postgresql://user:password@base:5432/target_db',
//   //   excludeTables: ['logs', 'temp_table', 'cache_data'],
//   //   schema: 'public'
//   // };

  // ‚úÖ V√≠ d·ª• connection string ƒë√∫ng
  const config = {
    sourceConnectionString: 'Host=127.0.0.1;Port=5433;Database=POS1;Username=myuser;Password=mypassword;SSL Mode=Disable;',
    targetConnectionString: 'Host=127.0.0.1;Port=5433;Database=POS23;Username=myuser;Password=mypassword;SSL Mode=Disable;',
    excludeTables: ['__EFMigrationsHistory'], // Nh·ªØng b·∫£ng kh√¥ng di chuy·ªÉn
    schema: 'public'
  };

  console.log('üìù L∆∞u √Ω: H√£y thay ƒë·ªïi connection strings cho ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng c·ªßa b·∫°n');
  console.log('V√≠ d·ª• format:');
  console.log('- Local: postgresql://user:pass@localhost:5432/dbname');
  console.log('- Remote: postgresql://user:pass@192.168.1.100:5432/dbname');
  console.log('- Cloud: postgresql://user:pass@host.amazonaws.com:5432/dbname');
  
  // Uncomment d√≤ng d∆∞·ªõi ƒë·ªÉ ch·∫°y (sau khi s·ª≠a connection strings)
// }
runMigration(config);